{"ast":null,"code":"connect: async () => {\n  try {\n    set({\n      connecting: true,\n      error: null\n    });\n    console.log(\"Starting connection attempt...\");\n\n    // Log SDK version if available\n    try {\n      console.log(\"SDK Version:\", VIAM.version || \"Unknown\");\n    } catch (e) {\n      console.log(\"Could not determine SDK version\");\n    }\n    console.log(\"Creating robot client...\");\n    const client = await getRobotClient();\n    console.log(\"Robot client created successfully!\");\n    try {\n      console.log(\"Getting resources...\");\n      const resources = await client.resourceNames();\n      console.log(\"Resources:\", resources);\n    } catch (resourceError) {\n      console.error(\"Error getting resources:\", resourceError);\n    }\n    set({\n      robotClient: client,\n      connected: true,\n      connecting: false\n    });\n  } catch (error) {\n    console.error(\"Detailed connection error:\", error);\n    // Log the full error object for inspection\n    console.log(\"Error type:\", typeof error);\n    console.log(\"Error name:\", error.name);\n    console.log(\"Error message:\", error.message);\n    console.log(\"Error stack:\", error.stack);\n    set({\n      error: `Failed to connect: ${error.message || \"Unknown error\"}`,\n      connecting: false\n    });\n  }\n};","map":{"version":3,"names":["connect","set","connecting","error","console","log","VIAM","version","e","client","getRobotClient","resources","resourceNames","resourceError","robotClient","connected","name","message","stack"],"sources":["/home/cjp7591/dev/dashboard/src/App.jsx"],"sourcesContent":["connect: async () => {\n    try {\n      set({ connecting: true, error: null });\n      console.log(\"Starting connection attempt...\");\n      \n      // Log SDK version if available\n      try {\n        console.log(\"SDK Version:\", VIAM.version || \"Unknown\");\n      } catch (e) {\n        console.log(\"Could not determine SDK version\");\n      }\n      \n      console.log(\"Creating robot client...\");\n      const client = await getRobotClient();\n      console.log(\"Robot client created successfully!\");\n      \n      try {\n        console.log(\"Getting resources...\");\n        const resources = await client.resourceNames();\n        console.log(\"Resources:\", resources);\n      } catch (resourceError) {\n        console.error(\"Error getting resources:\", resourceError);\n      }\n      \n      set({ robotClient: client, connected: true, connecting: false });\n    } catch (error) {\n      console.error(\"Detailed connection error:\", error);\n      // Log the full error object for inspection\n      console.log(\"Error type:\", typeof error);\n      console.log(\"Error name:\", error.name);\n      console.log(\"Error message:\", error.message);\n      console.log(\"Error stack:\", error.stack);\n      \n      set({\n        error: `Failed to connect: ${error.message || \"Unknown error\"}`,\n        connecting: false,\n      });\n    }\n  }"],"mappings":"AAAAA,OAAO,EAAE,YAAY;EACjB,IAAI;IACFC,GAAG,CAAC;MAAEC,UAAU,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACtCC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;;IAE7C;IACA,IAAI;MACFD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,IAAI,CAACC,OAAO,IAAI,SAAS,CAAC;IACxD,CAAC,CAAC,OAAOC,CAAC,EAAE;MACVJ,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAChD;IAEAD,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,MAAMI,MAAM,GAAG,MAAMC,cAAc,CAAC,CAAC;IACrCN,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IAEjD,IAAI;MACFD,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC,MAAMM,SAAS,GAAG,MAAMF,MAAM,CAACG,aAAa,CAAC,CAAC;MAC9CR,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEM,SAAS,CAAC;IACtC,CAAC,CAAC,OAAOE,aAAa,EAAE;MACtBT,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEU,aAAa,CAAC;IAC1D;IAEAZ,GAAG,CAAC;MAAEa,WAAW,EAAEL,MAAM;MAAEM,SAAS,EAAE,IAAI;MAAEb,UAAU,EAAE;IAAM,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD;IACAC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,OAAOF,KAAK,CAAC;IACxCC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,KAAK,CAACa,IAAI,CAAC;IACtCZ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAACc,OAAO,CAAC;IAC5Cb,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,KAAK,CAACe,KAAK,CAAC;IAExCjB,GAAG,CAAC;MACFE,KAAK,EAAE,sBAAsBA,KAAK,CAACc,OAAO,IAAI,eAAe,EAAE;MAC/Df,UAAU,EAAE;IACd,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}