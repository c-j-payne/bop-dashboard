{"ast":null,"code":"import { create } from 'zustand';\nimport { getRobotClient, getSensorClient } from './client.js';\nexport const useRobotStore = create((set, get) => ({\n  robotClient: null,\n  connected: false,\n  connecting: false,\n  error: null,\n  connect: async () => {\n    try {\n      set({\n        connecting: true,\n        error: null\n      });\n      const client = await getRobotClient();\n\n      // Verify the connection works by getting resources\n      const resources = await client.resourceNames();\n      console.log('Available resources:', resources);\n      set({\n        robotClient: client,\n        connected: true,\n        connecting: false\n      });\n    } catch (error) {\n      console.error('Connection error details:', error);\n      set({\n        error: `Failed to connect: ${error.message || 'Unknown error'}`,\n        connecting: false\n      });\n    }\n  },\n  disconnect: async () => {\n    set({\n      robotClient: null,\n      connected: false\n    });\n  },\n  getSensorReadings: async sensorName => {\n    const {\n      robotClient\n    } = get();\n    if (!robotClient) throw new Error(\"Not connected to robot\");\n    const sensorClient = getSensorClient(robotClient, sensorName);\n    return await sensorClient.getReadings();\n  }\n}));","map":{"version":3,"names":["create","getRobotClient","getSensorClient","useRobotStore","set","get","robotClient","connected","connecting","error","connect","client","resources","resourceNames","console","log","message","disconnect","getSensorReadings","sensorName","Error","sensorClient","getReadings"],"sources":["/home/cjp7591/dev/dashboard/src/state.js"],"sourcesContent":["import { create } from 'zustand';\nimport { getRobotClient, getSensorClient } from './client.js';\n\nexport const useRobotStore = create((set, get) => ({\n  robotClient: null,\n  connected: false,\n  connecting: false,\n  error: null,\n  connect: async () => {\n    try {\n      set({ connecting: true, error: null });\n      const client = await getRobotClient();\n      \n      // Verify the connection works by getting resources\n      const resources = await client.resourceNames();\n      console.log('Available resources:', resources);\n      \n      set({ robotClient: client, connected: true, connecting: false });\n    } catch (error) {\n      console.error('Connection error details:', error);\n      set({\n        error: `Failed to connect: ${error.message || 'Unknown error'}`,\n        connecting: false,\n      });\n    }\n  },\n  disconnect: async () => {\n    set({ robotClient: null, connected: false });\n  },\n  getSensorReadings: async (sensorName) => {\n    const { robotClient } = get();\n    if (!robotClient) throw new Error(\"Not connected to robot\");\n    \n    const sensorClient = getSensorClient(robotClient, sensorName);\n    return await sensorClient.getReadings();\n  },\n}));"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,cAAc,EAAEC,eAAe,QAAQ,aAAa;AAE7D,OAAO,MAAMC,aAAa,GAAGH,MAAM,CAAC,CAACI,GAAG,EAAEC,GAAG,MAAM;EACjDC,WAAW,EAAE,IAAI;EACjBC,SAAS,EAAE,KAAK;EAChBC,UAAU,EAAE,KAAK;EACjBC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,MAAAA,CAAA,KAAY;IACnB,IAAI;MACFN,GAAG,CAAC;QAAEI,UAAU,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACtC,MAAME,MAAM,GAAG,MAAMV,cAAc,CAAC,CAAC;;MAErC;MACA,MAAMW,SAAS,GAAG,MAAMD,MAAM,CAACE,aAAa,CAAC,CAAC;MAC9CC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,SAAS,CAAC;MAE9CR,GAAG,CAAC;QAAEE,WAAW,EAAEK,MAAM;QAAEJ,SAAS,EAAE,IAAI;QAAEC,UAAU,EAAE;MAAM,CAAC,CAAC;IAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDL,GAAG,CAAC;QACFK,KAAK,EAAE,sBAAsBA,KAAK,CAACO,OAAO,IAAI,eAAe,EAAE;QAC/DR,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;EACF,CAAC;EACDS,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtBb,GAAG,CAAC;MAAEE,WAAW,EAAE,IAAI;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;EAC9C,CAAC;EACDW,iBAAiB,EAAE,MAAOC,UAAU,IAAK;IACvC,MAAM;MAAEb;IAAY,CAAC,GAAGD,GAAG,CAAC,CAAC;IAC7B,IAAI,CAACC,WAAW,EAAE,MAAM,IAAIc,KAAK,CAAC,wBAAwB,CAAC;IAE3D,MAAMC,YAAY,GAAGnB,eAAe,CAACI,WAAW,EAAEa,UAAU,CAAC;IAC7D,OAAO,MAAME,YAAY,CAACC,WAAW,CAAC,CAAC;EACzC;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}