{"ast":null,"code":"// src/client.ts\nimport { createRobotClient, StreamClient, SensorClient, CameraClient } from \"@viamrobotics/sdk\";\nexport const getRobotClient = async () => {\n  try {\n    console.log(\"Starting robot client connection...\");\n    const host = 'bop2025-main.1qcq9pmop4.viam.cloud';\n    console.log(`Connecting to host: ${host}`);\n\n    // Use type assertion to bypass type checking\n    const config = {\n      host,\n      credential: {\n        type: 'api-key',\n        payload: 'hxtk88rojiq2pzc7nasiiymnbfxr1dyc'\n      },\n      signalingAddress: \"https://app.viam.com:443\",\n      iceServers: [{\n        urls: \"stun:global.stun.twilio.com:3478\"\n      }],\n      // Add some extra options that might help with connection\n      allowInsecure: true,\n      disableWebRTC: true,\n      // Try disabling WebRTC to use direct gRPC\n      requestTimeout: 30000 // 30 seconds timeout\n    };\n    console.log(\"Connection config:\", JSON.stringify(config, null, 2));\n    const client = await createRobotClient(config);\n    console.log(\"Successfully created robot client\");\n    return client;\n  } catch (error) {\n    console.error(\"Error creating robot client:\", error);\n    throw error;\n  }\n};\nexport const getCameraClient = (client, cameraName) => {\n  return new CameraClient(client, cameraName);\n};\nexport const getSensorClient = (client, sensorName) => {\n  return new SensorClient(client, sensorName);\n};\nexport const getStreamClient = client => {\n  return new StreamClient(client);\n};\n\n// Add the missing getStream function\nexport const getStream = async (streamClient, name) => {\n  const streamPromise = new Promise((resolve, reject) => {\n    const handleTrack = event => {\n      const stream = event.streams[0];\n      if (!stream) {\n        streamClient.off(\"track\", handleTrack);\n        reject(new Error(\"Received track event with no streams\"));\n      } else if (stream.id === name) {\n        streamClient.off(\"track\", handleTrack);\n        resolve(stream);\n      }\n    };\n    streamClient.on(\"track\", handleTrack);\n  });\n  await streamClient.add(name);\n  return streamPromise;\n};","map":{"version":3,"names":["createRobotClient","StreamClient","SensorClient","CameraClient","getRobotClient","console","log","host","config","credential","type","payload","signalingAddress","iceServers","urls","allowInsecure","disableWebRTC","requestTimeout","JSON","stringify","client","error","getCameraClient","cameraName","getSensorClient","sensorName","getStreamClient","getStream","streamClient","name","streamPromise","Promise","resolve","reject","handleTrack","event","stream","streams","off","Error","id","on","add"],"sources":["/home/cjp7591/dev/dashboard/src/client.ts"],"sourcesContent":["// src/client.ts\nimport {\n    createRobotClient,\n    type RobotClient,\n    StreamClient,\n    SensorClient,\n    CameraClient,\n  } from \"@viamrobotics/sdk\";\n  \n  export const getRobotClient = async (): Promise<RobotClient> => {\n    try {\n      console.log(\"Starting robot client connection...\");\n      const host = 'bop2025-main.1qcq9pmop4.viam.cloud';\n      \n      console.log(`Connecting to host: ${host}`);\n      \n      // Use type assertion to bypass type checking\n      const config = {\n        host,\n        credential: {\n          type: 'api-key',\n          payload: 'hxtk88rojiq2pzc7nasiiymnbfxr1dyc',\n        },\n        signalingAddress: \"https://app.viam.com:443\",\n        iceServers: [{ urls: \"stun:global.stun.twilio.com:3478\" }],\n        // Add some extra options that might help with connection\n        allowInsecure: true,\n        disableWebRTC: true, // Try disabling WebRTC to use direct gRPC\n        requestTimeout: 30000, // 30 seconds timeout\n      } as any;\n      \n      console.log(\"Connection config:\", JSON.stringify(config, null, 2));\n      const client = await createRobotClient(config);\n      console.log(\"Successfully created robot client\");\n      return client;\n    } catch (error) {\n      console.error(\"Error creating robot client:\", error);\n      throw error;\n    }\n  };\n  \n  export const getCameraClient = (client: RobotClient, cameraName: string): CameraClient => {\n    return new CameraClient(client, cameraName);\n  };\n  \n  export const getSensorClient = (client: RobotClient, sensorName: string): SensorClient => {\n    return new SensorClient(client, sensorName);\n  };\n  \n  export const getStreamClient = (client: RobotClient): StreamClient => {\n    return new StreamClient(client);\n  };\n  \n  // Add the missing getStream function\n  export const getStream = async (\n    streamClient: StreamClient,\n    name: string\n  ): Promise<MediaStream> => {\n    const streamPromise = new Promise<MediaStream>((resolve, reject) => {\n      const handleTrack = (event: RTCTrackEvent) => {\n        const stream = event.streams[0];\n  \n        if (!stream) {\n          streamClient.off(\"track\", handleTrack as (args: unknown) => void);\n          reject(new Error(\"Received track event with no streams\"));\n        } else if (stream.id === name) {\n          streamClient.off(\"track\", handleTrack as (args: unknown) => void);\n          resolve(stream);\n        }\n      };\n  \n      streamClient.on(\"track\", handleTrack as (args: unknown) => void);\n    });\n  \n    await streamClient.add(name);\n  \n    return streamPromise;\n  };"],"mappings":"AAAA;AACA,SACIA,iBAAiB,EAEjBC,YAAY,EACZC,YAAY,EACZC,YAAY,QACP,mBAAmB;AAE1B,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAkC;EAC9D,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClD,MAAMC,IAAI,GAAG,oCAAoC;IAEjDF,OAAO,CAACC,GAAG,CAAC,uBAAuBC,IAAI,EAAE,CAAC;;IAE1C;IACA,MAAMC,MAAM,GAAG;MACbD,IAAI;MACJE,UAAU,EAAE;QACVC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;MACX,CAAC;MACDC,gBAAgB,EAAE,0BAA0B;MAC5CC,UAAU,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAmC,CAAC,CAAC;MAC1D;MACAC,aAAa,EAAE,IAAI;MACnBC,aAAa,EAAE,IAAI;MAAE;MACrBC,cAAc,EAAE,KAAK,CAAE;IACzB,CAAQ;IAERZ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEY,IAAI,CAACC,SAAS,CAACX,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAClE,MAAMY,MAAM,GAAG,MAAMpB,iBAAiB,CAACQ,MAAM,CAAC;IAC9CH,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChD,OAAOc,MAAM;EACf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAACF,MAAmB,EAAEG,UAAkB,KAAmB;EACxF,OAAO,IAAIpB,YAAY,CAACiB,MAAM,EAAEG,UAAU,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAACJ,MAAmB,EAAEK,UAAkB,KAAmB;EACxF,OAAO,IAAIvB,YAAY,CAACkB,MAAM,EAAEK,UAAU,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIN,MAAmB,IAAmB;EACpE,OAAO,IAAInB,YAAY,CAACmB,MAAM,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMO,SAAS,GAAG,MAAAA,CACvBC,YAA0B,EAC1BC,IAAY,KACa;EACzB,MAAMC,aAAa,GAAG,IAAIC,OAAO,CAAc,CAACC,OAAO,EAAEC,MAAM,KAAK;IAClE,MAAMC,WAAW,GAAIC,KAAoB,IAAK;MAC5C,MAAMC,MAAM,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC;MAE/B,IAAI,CAACD,MAAM,EAAE;QACXR,YAAY,CAACU,GAAG,CAAC,OAAO,EAAEJ,WAAsC,CAAC;QACjED,MAAM,CAAC,IAAIM,KAAK,CAAC,sCAAsC,CAAC,CAAC;MAC3D,CAAC,MAAM,IAAIH,MAAM,CAACI,EAAE,KAAKX,IAAI,EAAE;QAC7BD,YAAY,CAACU,GAAG,CAAC,OAAO,EAAEJ,WAAsC,CAAC;QACjEF,OAAO,CAACI,MAAM,CAAC;MACjB;IACF,CAAC;IAEDR,YAAY,CAACa,EAAE,CAAC,OAAO,EAAEP,WAAsC,CAAC;EAClE,CAAC,CAAC;EAEF,MAAMN,YAAY,CAACc,GAAG,CAACb,IAAI,CAAC;EAE5B,OAAOC,aAAa;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}