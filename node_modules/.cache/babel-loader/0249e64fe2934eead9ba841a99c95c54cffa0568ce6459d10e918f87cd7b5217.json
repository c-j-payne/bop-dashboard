{"ast":null,"code":"var _jsxFileName = \"/home/cjp7591/dev/dashboard/src/components/SensorDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useRobotStore } from '../state.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorDisplay = ({\n  sensorName\n}) => {\n  _s();\n  const [readings, setReadings] = useState({});\n  const [loading, setLoading] = useState(false);\n  const {\n    getSensorReadings,\n    connected\n  } = useRobotStore();\n  useEffect(() => {\n    if (!connected) return;\n    const fetchReadings = async () => {\n      try {\n        setLoading(true);\n        const data = await getSensorReadings(sensorName);\n        setReadings(data);\n      } catch (error) {\n        console.error('Error fetching sensor readings:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchReadings();\n    const interval = setInterval(fetchReadings, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [getSensorReadings, connected, sensorName]);\n  if (!connected) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '1rem',\n        backgroundColor: '#f3f4f6',\n        borderRadius: '0.375rem'\n      },\n      children: \"Connect to robot first\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  if (loading && Object.keys(readings).length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '1rem',\n        backgroundColor: 'white',\n        borderRadius: '0.375rem',\n        boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)'\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '1rem',\n      backgroundColor: 'white',\n      borderRadius: '0.375rem',\n      boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        fontSize: '1.125rem',\n        fontWeight: 600,\n        marginBottom: '0.5rem'\n      },\n      children: sensorName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '0.5rem'\n      },\n      children: Object.entries(readings).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 500\n          },\n          children: [key, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: typeof value === 'object' ? JSON.stringify(value) : value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorDisplay, \"lDl/bUWEO5jI6zf6J6gnGE4L9RM=\", false, function () {\n  return [useRobotStore];\n});\n_c = SensorDisplay;\nexport default SensorDisplay;\nvar _c;\n$RefreshReg$(_c, \"SensorDisplay\");","map":{"version":3,"names":["React","useEffect","useState","useRobotStore","jsxDEV","_jsxDEV","SensorDisplay","sensorName","_s","readings","setReadings","loading","setLoading","getSensorReadings","connected","fetchReadings","data","error","console","interval","setInterval","clearInterval","style","padding","backgroundColor","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","length","boxShadow","fontSize","fontWeight","marginBottom","display","flexDirection","gap","entries","map","key","value","justifyContent","JSON","stringify","_c","$RefreshReg$"],"sources":["/home/cjp7591/dev/dashboard/src/components/SensorDisplay.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useRobotStore } from '../state.js';\n\nconst SensorDisplay = ({ sensorName }) => {\n  const [readings, setReadings] = useState({});\n  const [loading, setLoading] = useState(false);\n  const { getSensorReadings, connected } = useRobotStore();\n  \n  useEffect(() => {\n    if (!connected) return;\n    \n    const fetchReadings = async () => {\n      try {\n        setLoading(true);\n        const data = await getSensorReadings(sensorName);\n        setReadings(data);\n      } catch (error) {\n        console.error('Error fetching sensor readings:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchReadings();\n    const interval = setInterval(fetchReadings, 5000); // Update every 5 seconds\n    \n    return () => clearInterval(interval);\n  }, [getSensorReadings, connected, sensorName]);\n  \n  if (!connected) {\n    return <div style={{ padding: '1rem', backgroundColor: '#f3f4f6', borderRadius: '0.375rem' }}>\n      Connect to robot first\n    </div>;\n  }\n  \n  if (loading && Object.keys(readings).length === 0) {\n    return <div style={{ padding: '1rem', backgroundColor: 'white', borderRadius: '0.375rem', boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)' }}>\n      Loading...\n    </div>;\n  }\n  \n  return (\n    <div style={{ padding: '1rem', backgroundColor: 'white', borderRadius: '0.375rem', boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)' }}>\n      <h2 style={{ fontSize: '1.125rem', fontWeight: 600, marginBottom: '0.5rem' }}>{sensorName}</h2>\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\n        {Object.entries(readings).map(([key, value]) => (\n          <div key={key} style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <span style={{ fontWeight: 500 }}>{key}:</span>\n            <span>{typeof value === 'object' ? JSON.stringify(value) : value}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SensorDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}