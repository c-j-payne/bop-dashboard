{"ast":null,"code":"import { createRobotClient } from \"@viamrobotics/sdk\";\nexport const getRobotClient = async () => {\n  try {\n    console.log(\"Starting robot client connection...\");\n    const host = 'bop2025-main.1qcq9pmop4.viam.cloud';\n\n    // Use a simpler config format that avoids newer syntax features\n    const config = {\n      host: host,\n      // Use a type assertion to help TypeScript and avoid SDK-specific types\n      credentials: {\n        type: 'api-key',\n        authEntity: '2597529f-b98b-4e62-8c94-7f99501b0a76',\n        payload: 'hxtk88rojiq2pzc7nasiiymnbfxr1dyc'\n      },\n      signalingAddress: \"https://app.viam.com:443\",\n      allowInsecure: true\n    };\n    console.log(\"Connection config:\", config);\n    return await createRobotClient(config);\n  } catch (error) {\n    console.error(\"Error creating robot client:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["createRobotClient","getRobotClient","console","log","host","config","credentials","type","authEntity","payload","signalingAddress","allowInsecure","error"],"sources":["/home/cjp7591/dev/dashboard/src/client.ts"],"sourcesContent":["import { createRobotClient, RobotClient } from \"@viamrobotics/sdk\";\n\nexport const getRobotClient = async (): Promise<RobotClient> => {\n  try {\n    console.log(\"Starting robot client connection...\");\n    const host = 'bop2025-main.1qcq9pmop4.viam.cloud';\n    \n    // Use a simpler config format that avoids newer syntax features\n    const config = {\n      host: host,\n      // Use a type assertion to help TypeScript and avoid SDK-specific types\n      credentials: {\n        type: 'api-key',\n        authEntity: '2597529f-b98b-4e62-8c94-7f99501b0a76',\n        payload: 'hxtk88rojiq2pzc7nasiiymnbfxr1dyc',\n      },\n      signalingAddress: \"https://app.viam.com:443\",\n      allowInsecure: true\n    } as any;\n    \n    console.log(\"Connection config:\", config);\n    return await createRobotClient(config);\n  } catch (error) {\n    console.error(\"Error creating robot client:\", error);\n    throw error;\n  }\n};"],"mappings":"AAAA,SAASA,iBAAiB,QAAqB,mBAAmB;AAElE,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAkC;EAC9D,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClD,MAAMC,IAAI,GAAG,oCAAoC;;IAEjD;IACA,MAAMC,MAAM,GAAG;MACbD,IAAI,EAAEA,IAAI;MACV;MACAE,WAAW,EAAE;QACXC,IAAI,EAAE,SAAS;QACfC,UAAU,EAAE,sCAAsC;QAClDC,OAAO,EAAE;MACX,CAAC;MACDC,gBAAgB,EAAE,0BAA0B;MAC5CC,aAAa,EAAE;IACjB,CAAQ;IAERT,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEE,MAAM,CAAC;IACzC,OAAO,MAAML,iBAAiB,CAACK,MAAM,CAAC;EACxC,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}