{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { create } from \"zustand\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { getRobotClient, getStreamClient, getSensorClient, getStream } from \"./client\";\nexport const useStore = create((set, get) => ({\n  status: \"disconnected\",\n  client: undefined,\n  streamClient: undefined,\n  connectOrDisconnect: () => {\n    const status = get().status;\n    if (status === \"disconnected\") {\n      console.log(`Currently disconnected, connecting...`);\n      console.log(\"Setting state to 'loading'...\");\n      set({\n        status: \"loading\"\n      });\n      console.log(`Getting robot client...`);\n      getRobotClient().then(client => {\n        console.log(`Got client ${client}`);\n        console.log(`Getting stream client`);\n        const streamClient = getStreamClient(client);\n        console.log(`Received stream client`);\n        const stateUpdate = {\n          status: \"connected\",\n          client,\n          streamClient\n        };\n        console.log(`Setting state to connected`);\n        set(stateUpdate);\n        console.log(\"Set state to connected\");\n      }).catch(error => {\n        console.error(\"Connection error:\", error);\n        set({\n          status: \"disconnected\"\n        });\n      });\n    } else if (status === \"connected\") {\n      console.log(`Currently connected, disconnecting...`);\n      set({\n        status: \"loading\"\n      });\n\n      // Simplified disconnection\n      set({\n        status: \"disconnected\",\n        client: undefined,\n        streamClient: undefined\n      });\n    }\n  }\n}));\n\n// Update the useStream function in state.ts to fix the typing issue\nexport const useStream = (streamClient, cameraName) => {\n  _s();\n  const okToConnectRef = useRef(true);\n  const [stream, setStream] = useState();\n  useEffect(() => {\n    if (streamClient && okToConnectRef.current) {\n      okToConnectRef.current = false;\n      getStream(streamClient, cameraName).then(mediaStream => setStream(mediaStream)).catch(error => {\n        console.warn(`Unable to connect to camera ${cameraName}`, error);\n      });\n      return () => {\n        okToConnectRef.current = true;\n        streamClient.remove(cameraName).catch(error => {\n          console.warn(`Unable to disconnect from camera ${cameraName}`, error);\n        });\n      };\n    }\n    return undefined;\n  }, [streamClient, cameraName]);\n  return stream;\n};\n_s(useStream, \"dU2bssM8aiseK5GBWcJ4FK1c6Zg=\");\nexport const useSensorReadings = (client, sensorName) => {\n  _s2();\n  const [readings, setReadings] = useState();\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    if (!client) return;\n    const fetchReadings = async () => {\n      try {\n        setLoading(true);\n        const sensorClient = getSensorClient(client, sensorName);\n        const data = await sensorClient.getReadings();\n        setReadings(data);\n      } catch (error) {\n        console.error(`Error fetching readings from ${sensorName}:`, error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchReadings();\n    const interval = setInterval(fetchReadings, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [client, sensorName]);\n  return {\n    readings,\n    loading\n  };\n};\n_s2(useSensorReadings, \"gUHpeOkWgkrhuCjDE0BMPxZ3a1c=\");","map":{"version":3,"names":["create","useEffect","useRef","useState","getRobotClient","getStreamClient","getSensorClient","getStream","useStore","set","get","status","client","undefined","streamClient","connectOrDisconnect","console","log","then","stateUpdate","catch","error","useStream","cameraName","_s","okToConnectRef","stream","setStream","current","mediaStream","warn","remove","useSensorReadings","sensorName","_s2","readings","setReadings","loading","setLoading","fetchReadings","sensorClient","data","getReadings","interval","setInterval","clearInterval"],"sources":["/home/cjp7591/dev/dashboard/src/state.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport { useEffect, useRef, useState } from \"react\";\nimport type {\n  RobotClient,\n  StreamClient,\n  SensorClient,\n  CameraClient,\n} from \"@viamrobotics/sdk\";\nimport {\n  getRobotClient,\n  getStreamClient,\n  getSensorClient,\n  getCameraClient,\n  getStream,\n} from \"./client\";\n\nexport type ClientStatus = \"disconnected\" | \"loading\" | \"connected\";\n\nexport interface Store {\n  status: ClientStatus;\n  client?: RobotClient;\n  streamClient?: StreamClient;\n  connectOrDisconnect: () => void;\n}\n\nexport const useStore = create<Store>((set, get) => ({\n  status: \"disconnected\",\n  client: undefined,\n  streamClient: undefined,\n  connectOrDisconnect: () => {\n    const status = get().status;\n    if (status === \"disconnected\") {\n      console.log(`Currently disconnected, connecting...`);\n      console.log(\"Setting state to 'loading'...\");\n      set({ status: \"loading\" });\n\n      console.log(`Getting robot client...`);\n      getRobotClient()\n        .then((client) => {\n          console.log(`Got client ${client}`);\n          console.log(`Getting stream client`);\n          const streamClient = getStreamClient(client);\n          console.log(`Received stream client`);\n\n          const stateUpdate = {\n            status: \"connected\" as ClientStatus,\n            client,\n            streamClient,\n          };\n          console.log(`Setting state to connected`);\n          set(stateUpdate);\n          console.log(\"Set state to connected\");\n        })\n        .catch((error: unknown) => {\n          console.error(\"Connection error:\", error);\n          set({ status: \"disconnected\" });\n        });\n    } else if (status === \"connected\") {\n      console.log(`Currently connected, disconnecting...`);\n      set({ status: \"loading\" });\n\n      // Simplified disconnection\n      set({ status: \"disconnected\", client: undefined, streamClient: undefined });\n    }\n  },\n}));\n\n// Update the useStream function in state.ts to fix the typing issue\nexport const useStream = (\n    streamClient: StreamClient | undefined,\n    cameraName: string\n  ): MediaStream | undefined => {\n    const okToConnectRef = useRef(true);\n    const [stream, setStream] = useState<MediaStream | undefined>();\n  \n    useEffect(() => {\n      if (streamClient && okToConnectRef.current) {\n        okToConnectRef.current = false;\n  \n        getStream(streamClient, cameraName)\n          .then((mediaStream: MediaStream) => setStream(mediaStream))\n          .catch((error: unknown) => {\n            console.warn(`Unable to connect to camera ${cameraName}`, error);\n          });\n  \n        return () => {\n          okToConnectRef.current = true;\n  \n          streamClient.remove(cameraName).catch((error: unknown) => {\n            console.warn(`Unable to disconnect from camera ${cameraName}`, error);\n          });\n        };\n      }\n  \n      return undefined;\n    }, [streamClient, cameraName]);\n  \n    return stream;\n  };\n\nexport const useSensorReadings = (\n  client: RobotClient | undefined,\n  sensorName: string\n) => {\n  const [readings, setReadings] = useState<Record<string, any> | undefined>();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!client) return;\n\n    const fetchReadings = async () => {\n      try {\n        setLoading(true);\n        const sensorClient = getSensorClient(client, sensorName);\n        const data = await sensorClient.getReadings();\n        setReadings(data);\n      } catch (error) {\n        console.error(`Error fetching readings from ${sensorName}:`, error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchReadings();\n    const interval = setInterval(fetchReadings, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [client, sensorName]);\n\n  return { readings, loading };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}