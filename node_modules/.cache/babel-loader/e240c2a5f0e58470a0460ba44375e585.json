{"ast":null,"code":"var _jsxFileName = \"/home/cjp7591/dev/dashboard/src/components/SensorDisplay.tsx\";\nimport React from \"react\";\nimport { useStore, useSensorReadings } from \"../state\";\nconst SensorDisplay = ({\n  sensorName,\n  title = sensorName\n}) => {\n  const {\n    client,\n    status\n  } = useStore();\n  const {\n    readings,\n    loading\n  } = useSensorReadings(client, sensorName);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-white rounded-lg shadow-md p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-lg font-semibold mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, title), status === \"connected\" ? loading && !readings ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-gray-500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"space-y-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }, readings ? Object.entries(readings).map(([key, value]) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    className: \"flex justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 19\n    }\n  }, key, \":\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 19\n    }\n  }, typeof value === \"object\" ? JSON.stringify(value) : value))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-gray-500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  }, \"No data available\")) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-gray-500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Please connect to robot first\"));\n};\nexport default SensorDisplay;","map":{"version":3,"names":["React","useStore","useSensorReadings","SensorDisplay","sensorName","title","client","status","readings","loading","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","key","value","JSON","stringify"],"sources":["/home/cjp7591/dev/dashboard/src/components/SensorDisplay.tsx"],"sourcesContent":["import React from \"react\";\nimport { useStore, useSensorReadings } from \"../state\";\n\ninterface SensorDisplayProps {\n  sensorName: string;\n  title?: string;\n}\n\nconst SensorDisplay: React.FC<SensorDisplayProps> = ({ \n  sensorName, \n  title = sensorName \n}) => {\n  const { client, status } = useStore();\n  const { readings, loading } = useSensorReadings(client, sensorName);\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-4\">\n      <h2 className=\"text-lg font-semibold mb-2\">{title}</h2>\n      {status === \"connected\" ? (\n        loading && !readings ? (\n          <div className=\"text-gray-500\">Loading...</div>\n        ) : (\n          <div className=\"space-y-2\">\n            {readings ? (\n              Object.entries(readings).map(([key, value]) => (\n                <div key={key} className=\"flex justify-between\">\n                  <span className=\"font-medium\">{key}:</span>\n                  <span>{typeof value === \"object\" ? JSON.stringify(value) : value}</span>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-gray-500\">No data available</div>\n            )}\n          </div>\n        )\n      ) : (\n        <div className=\"text-gray-500\">Please connect to robot first</div>\n      )}\n    </div>\n  );\n};\n\nexport default SensorDisplay;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,iBAAiB,QAAQ,UAAU;AAOtD,MAAMC,aAA2C,GAAGA,CAAC;EACnDC,UAAU;EACVC,KAAK,GAAGD;AACV,CAAC,KAAK;EACJ,MAAM;IAAEE,MAAM;IAAEC;EAAO,CAAC,GAAGN,QAAQ,CAAC,CAAC;EACrC,MAAM;IAAEO,QAAQ;IAAEC;EAAQ,CAAC,GAAGP,iBAAiB,CAACI,MAAM,EAAEF,UAAU,CAAC;EAEnE,oBACEJ,KAAA,CAAAU,aAAA;IAAKC,SAAS,EAAC,mCAAmC;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAChDjB,KAAA,CAAAU,aAAA;IAAIC,SAAS,EAAC,4BAA4B;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEZ,KAAU,CAAC,EACtDE,MAAM,KAAK,WAAW,GACrBE,OAAO,IAAI,CAACD,QAAQ,gBAClBR,KAAA,CAAAU,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,YAAe,CAAC,gBAE/CjB,KAAA,CAAAU,aAAA;IAAKC,SAAS,EAAC,WAAW;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACvBT,QAAQ,GACPU,MAAM,CAACC,OAAO,CAACX,QAAQ,CAAC,CAACY,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,kBACxCtB,KAAA,CAAAU,aAAA;IAAKW,GAAG,EAAEA,GAAI;IAACV,SAAS,EAAC,sBAAsB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7CjB,KAAA,CAAAU,aAAA;IAAMC,SAAS,EAAC,aAAa;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEI,GAAG,EAAC,GAAO,CAAC,eAC3CrB,KAAA,CAAAU,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAO,OAAOK,KAAK,KAAK,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,GAAGA,KAAY,CACpE,CACN,CAAC,gBAEFtB,KAAA,CAAAU,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,mBAAsB,CAEpD,CACN,gBAEDjB,KAAA,CAAAU,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,+BAAkC,CAEhE,CAAC;AAEV,CAAC;AAED,eAAed,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}