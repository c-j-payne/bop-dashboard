{"ast":null,"code":"// src/client.ts\nimport { createRobotClient, StreamClient, SensorClient, CameraClient } from \"@viamrobotics/sdk\";\nexport const getRobotClient = async () => {\n  const host = 'bop2025-main.1qcq9pmop4.viam.cloud';\n\n  // Use type assertion to bypass type checking\n  const config = {\n    host,\n    credential: {\n      // Try using \"credential\" (singular)\n      type: 'api-key',\n      payload: 'hxtk88rojiq2pzc7nasiiymnbfxr1dyc'\n    },\n    signalingAddress: \"https://app.viam.com:443\",\n    iceServers: [{\n      urls: \"stun:global.stun.twilio.com:3478\"\n    }]\n  };\n  return createRobotClient(config);\n};\nexport const getCameraClient = (client, cameraName) => {\n  return new CameraClient(client, cameraName);\n};\nexport const getSensorClient = (client, sensorName) => {\n  return new SensorClient(client, sensorName);\n};\nexport const getStreamClient = client => {\n  return new StreamClient(client);\n};","map":{"version":3,"names":["createRobotClient","StreamClient","SensorClient","CameraClient","getRobotClient","host","config","credential","type","payload","signalingAddress","iceServers","urls","getCameraClient","client","cameraName","getSensorClient","sensorName","getStreamClient"],"sources":["/home/cjp7591/dev/dashboard/src/client.ts"],"sourcesContent":["// src/client.ts\nimport {\n    createRobotClient,\n    type RobotClient,\n    StreamClient,\n    SensorClient,\n    CameraClient,\n  } from \"@viamrobotics/sdk\";\n  \n  export const getRobotClient = async (): Promise<RobotClient> => {\n    const host = 'bop2025-main.1qcq9pmop4.viam.cloud';\n    \n    // Use type assertion to bypass type checking\n    const config = {\n      host,\n      credential: {  // Try using \"credential\" (singular)\n        type: 'api-key',\n        payload: 'hxtk88rojiq2pzc7nasiiymnbfxr1dyc',\n      },\n      signalingAddress: \"https://app.viam.com:443\",\n      iceServers: [{ urls: \"stun:global.stun.twilio.com:3478\" }],\n    } as any;\n    \n    return createRobotClient(config);\n  };\n  \n  export const getCameraClient = (client: RobotClient, cameraName: string): CameraClient => {\n    return new CameraClient(client, cameraName);\n  };\n  \n  export const getSensorClient = (client: RobotClient, sensorName: string): SensorClient => {\n    return new SensorClient(client, sensorName);\n  };\n  \n  export const getStreamClient = (client: RobotClient): StreamClient => {\n    return new StreamClient(client);\n  };"],"mappings":"AAAA;AACA,SACIA,iBAAiB,EAEjBC,YAAY,EACZC,YAAY,EACZC,YAAY,QACP,mBAAmB;AAE1B,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAkC;EAC9D,MAAMC,IAAI,GAAG,oCAAoC;;EAEjD;EACA,MAAMC,MAAM,GAAG;IACbD,IAAI;IACJE,UAAU,EAAE;MAAG;MACbC,IAAI,EAAE,SAAS;MACfC,OAAO,EAAE;IACX,CAAC;IACDC,gBAAgB,EAAE,0BAA0B;IAC5CC,UAAU,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAmC,CAAC;EAC3D,CAAQ;EAER,OAAOZ,iBAAiB,CAACM,MAAM,CAAC;AAClC,CAAC;AAED,OAAO,MAAMO,eAAe,GAAGA,CAACC,MAAmB,EAAEC,UAAkB,KAAmB;EACxF,OAAO,IAAIZ,YAAY,CAACW,MAAM,EAAEC,UAAU,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAACF,MAAmB,EAAEG,UAAkB,KAAmB;EACxF,OAAO,IAAIf,YAAY,CAACY,MAAM,EAAEG,UAAU,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIJ,MAAmB,IAAmB;EACpE,OAAO,IAAIb,YAAY,CAACa,MAAM,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}