{"ast":null,"code":"var _jsxFileName = \"/home/cjp7591/dev/dashboard/src/components/CameraView.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useRobotStore } from '../state.js';\nimport { getCameraClient } from '../client.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraView = ({\n  cameraName\n}) => {\n  _s();\n  const [imageData, setImageData] = useState(null);\n  const {\n    robotClient,\n    connected\n  } = useRobotStore();\n  useEffect(() => {\n    if (!robotClient || !connected) return;\n    const fetchCameraImage = async () => {\n      try {\n        const cameraClient = getCameraClient(robotClient, cameraName);\n\n        // Instead of streaming, we'll fetch images at regular intervals\n        const updateImage = async () => {\n          try {\n            // Get an image from the camera\n            const imageBytes = await cameraClient.getImage();\n\n            // Make sure we're working with a Uint8Array\n            const uint8Array = new Uint8Array(imageBytes);\n\n            // Convert the Uint8Array to a base64 string\n            const binary = [...uint8Array].map(byte => String.fromCharCode(byte)).join('');\n            const base64Image = btoa(binary);\n\n            // Assume JPEG format as default\n            setImageData(`data:image/jpeg;base64,${base64Image}`);\n          } catch (error) {\n            console.error('Error getting camera image:', error);\n          }\n        };\n\n        // Update image immediately\n        updateImage();\n\n        // Set up interval to update the image regularly\n        const intervalId = setInterval(updateImage, 500); // Update every 500ms\n\n        return () => {\n          clearInterval(intervalId);\n        };\n      } catch (error) {\n        console.error('Error setting up camera:', error);\n      }\n    };\n    fetchCameraImage();\n  }, [robotClient, connected, cameraName]);\n  if (!connected) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '1rem',\n        backgroundColor: '#f3f4f6',\n        borderRadius: '0.375rem'\n      },\n      children: \"Connect to robot first\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '0.5rem',\n      backgroundColor: 'white',\n      borderRadius: '0.375rem',\n      boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        fontSize: '1.125rem',\n        fontWeight: 600,\n        marginBottom: '0.5rem'\n      },\n      children: cameraName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), imageData ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageData,\n      alt: `${cameraName} feed`,\n      style: {\n        width: '100%',\n        height: 'auto',\n        maxHeight: '400px',\n        borderRadius: '0.375rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '2rem',\n        textAlign: 'center',\n        backgroundColor: '#f3f4f6',\n        borderRadius: '0.375rem'\n      },\n      children: \"Loading camera feed...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraView, \"tpBPlzM1ySwb7iuLil7sVtpOHOU=\", false, function () {\n  return [useRobotStore];\n});\n_c = CameraView;\nexport default CameraView;\nvar _c;\n$RefreshReg$(_c, \"CameraView\");","map":{"version":3,"names":["React","useEffect","useState","useRobotStore","getCameraClient","jsxDEV","_jsxDEV","CameraView","cameraName","_s","imageData","setImageData","robotClient","connected","fetchCameraImage","cameraClient","updateImage","imageBytes","getImage","uint8Array","Uint8Array","binary","map","byte","String","fromCharCode","join","base64Image","btoa","error","console","intervalId","setInterval","clearInterval","style","padding","backgroundColor","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","boxShadow","fontSize","fontWeight","marginBottom","src","alt","width","height","maxHeight","textAlign","_c","$RefreshReg$"],"sources":["/home/cjp7591/dev/dashboard/src/components/CameraView.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useRobotStore } from '../state.js';\nimport { getCameraClient } from '../client.js';\n\nconst CameraView = ({ cameraName }) => {\n  const [imageData, setImageData] = useState(null);\n  const { robotClient, connected } = useRobotStore();\n  \n  useEffect(() => {\n    if (!robotClient || !connected) return;\n    \n    const fetchCameraImage = async () => {\n      try {\n        const cameraClient = getCameraClient(robotClient, cameraName);\n        \n        // Instead of streaming, we'll fetch images at regular intervals\n        const updateImage = async () => {\n          try {\n            // Get an image from the camera\n            const imageBytes = await cameraClient.getImage();\n            \n            // Make sure we're working with a Uint8Array\n            const uint8Array = new Uint8Array(imageBytes);\n            \n            // Convert the Uint8Array to a base64 string\n            const binary = [...uint8Array]\n              .map(byte => String.fromCharCode(byte))\n              .join('');\n            \n            const base64Image = btoa(binary);\n            \n            // Assume JPEG format as default\n            setImageData(`data:image/jpeg;base64,${base64Image}`);\n          } catch (error) {\n            console.error('Error getting camera image:', error);\n          }\n        };\n        \n        // Update image immediately\n        updateImage();\n        \n        // Set up interval to update the image regularly\n        const intervalId = setInterval(updateImage, 500); // Update every 500ms\n        \n        return () => {\n          clearInterval(intervalId);\n        };\n      } catch (error) {\n        console.error('Error setting up camera:', error);\n      }\n    };\n    \n    fetchCameraImage();\n  }, [robotClient, connected, cameraName]);\n  \n  if (!connected) {\n    return <div style={{ padding: '1rem', backgroundColor: '#f3f4f6', borderRadius: '0.375rem' }}>\n      Connect to robot first\n    </div>;\n  }\n  \n  return (\n    <div style={{ padding: '0.5rem', backgroundColor: 'white', borderRadius: '0.375rem', boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)' }}>\n      <h2 style={{ fontSize: '1.125rem', fontWeight: 600, marginBottom: '0.5rem' }}>{cameraName}</h2>\n      {imageData ? (\n        <img \n          src={imageData} \n          alt={`${cameraName} feed`}\n          style={{ \n            width: '100%', \n            height: 'auto', \n            maxHeight: '400px',\n            borderRadius: '0.375rem' \n          }} \n        />\n      ) : (\n        <div style={{ padding: '2rem', textAlign: 'center', backgroundColor: '#f3f4f6', borderRadius: '0.375rem' }}>\n          Loading camera feed...\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CameraView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}