{"ast":null,"code":"import { createRobotClient, StreamClient, SensorClient, CameraClient } from \"@viamrobotics/sdk\";\n\n// Main function to get the robot client\nexport const getRobotClient = async () => {\n  try {\n    console.log(\"Starting robot client connection...\");\n    const host = 'bop2025-main.1qcq9pmop4.viam.cloud';\n\n    // Use a simple config format\n    const config = {\n      host,\n      credentials: {\n        type: 'api-key',\n        authEntity: '2597529f-b98b-4e62-8c94-7f99501b0a76',\n        payload: 'hxtk88rojiq2pzc7nasiiymnbfxr1dyc'\n      },\n      signalingAddress: \"https://app.viam.com:443\",\n      iceServers: [{\n        urls: \"stun:global.stun.twilio.com:3478\"\n      }]\n    };\n    return await createRobotClient(config);\n  } catch (error) {\n    console.error(\"Error creating robot client:\", error);\n    throw error;\n  }\n};\n\n// Create a StreamClient instance\nexport const getStreamClient = client => {\n  if (!StreamClient) {\n    throw new Error(\"StreamClient is not available in the SDK\");\n  }\n  return new StreamClient(client);\n};\n\n// Create a CameraClient instance\nexport const getCameraClient = (client, cameraName) => {\n  return new CameraClient(client, cameraName);\n};\n\n// Create a SensorClient instance\nexport const getSensorClient = (client, sensorName) => {\n  return new SensorClient(client, sensorName);\n};\n\n// Helper function to get a media stream from a camera\nexport const getStream = async (streamClient, name) => {\n  console.log(`Getting stream for camera: ${name}`);\n  const streamPromise = new Promise((resolve, reject) => {\n    const handleTrack = event => {\n      const stream = event.streams[0];\n      if (!stream) {\n        streamClient.off(\"track\", handleTrack);\n        reject(new Error(\"Received track event with no streams\"));\n      } else if (stream.id === name) {\n        streamClient.off(\"track\", handleTrack);\n        resolve(stream);\n      }\n    };\n    streamClient.on(\"track\", handleTrack);\n  });\n  try {\n    await streamClient.add(name);\n    return streamPromise;\n  } catch (error) {\n    console.error(`Error adding stream for ${name}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["createRobotClient","StreamClient","SensorClient","CameraClient","getRobotClient","console","log","host","config","credentials","type","authEntity","payload","signalingAddress","iceServers","urls","error","getStreamClient","client","Error","getCameraClient","cameraName","getSensorClient","sensorName","getStream","streamClient","name","streamPromise","Promise","resolve","reject","handleTrack","event","stream","streams","off","id","on","add"],"sources":["/home/cjp7591/dev/dashboard/src/client.ts"],"sourcesContent":["import {\n    createRobotClient,\n    RobotClient,\n    StreamClient,\n    SensorClient,\n    CameraClient\n  } from \"@viamrobotics/sdk\";\n  \n  // Main function to get the robot client\n  export const getRobotClient = async (): Promise<RobotClient> => {\n    try {\n      console.log(\"Starting robot client connection...\");\n      const host = 'bop2025-main.1qcq9pmop4.viam.cloud';\n      \n      // Use a simple config format\n      const config = {\n        host,\n        credentials: {\n          type: 'api-key',\n          authEntity: '2597529f-b98b-4e62-8c94-7f99501b0a76',\n          payload: 'hxtk88rojiq2pzc7nasiiymnbfxr1dyc',\n        },\n        signalingAddress: \"https://app.viam.com:443\",\n        iceServers: [{ urls: \"stun:global.stun.twilio.com:3478\" }],\n      };\n      \n      return await createRobotClient(config as any);\n    } catch (error) {\n      console.error(\"Error creating robot client:\", error);\n      throw error;\n    }\n  };\n  \n  // Create a StreamClient instance\n  export const getStreamClient = (client: RobotClient): StreamClient => {\n    if (!StreamClient) {\n      throw new Error(\"StreamClient is not available in the SDK\");\n    }\n    return new StreamClient(client);\n  };\n  \n  // Create a CameraClient instance\n  export const getCameraClient = (client: RobotClient, cameraName: string): CameraClient => {\n    return new CameraClient(client, cameraName);\n  };\n  \n  // Create a SensorClient instance\n  export const getSensorClient = (client: RobotClient, sensorName: string): SensorClient => {\n    return new SensorClient(client, sensorName);\n  };\n  \n  // Helper function to get a media stream from a camera\n  export const getStream = async (\n    streamClient: StreamClient,\n    name: string\n  ): Promise<MediaStream> => {\n    console.log(`Getting stream for camera: ${name}`);\n    \n    const streamPromise = new Promise<MediaStream>((resolve, reject) => {\n      const handleTrack = (event: RTCTrackEvent) => {\n        const stream = event.streams[0];\n  \n        if (!stream) {\n          streamClient.off(\"track\", handleTrack as (args: unknown) => void);\n          reject(new Error(\"Received track event with no streams\"));\n        } else if (stream.id === name) {\n          streamClient.off(\"track\", handleTrack as (args: unknown) => void);\n          resolve(stream);\n        }\n      };\n  \n      streamClient.on(\"track\", handleTrack as (args: unknown) => void);\n    });\n  \n    try {\n      await streamClient.add(name);\n      return streamPromise;\n    } catch (error) {\n      console.error(`Error adding stream for ${name}:`, error);\n      throw error;\n    }\n  };"],"mappings":"AAAA,SACIA,iBAAiB,EAEjBC,YAAY,EACZC,YAAY,EACZC,YAAY,QACP,mBAAmB;;AAE1B;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAkC;EAC9D,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClD,MAAMC,IAAI,GAAG,oCAAoC;;IAEjD;IACA,MAAMC,MAAM,GAAG;MACbD,IAAI;MACJE,WAAW,EAAE;QACXC,IAAI,EAAE,SAAS;QACfC,UAAU,EAAE,sCAAsC;QAClDC,OAAO,EAAE;MACX,CAAC;MACDC,gBAAgB,EAAE,0BAA0B;MAC5CC,UAAU,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAmC,CAAC;IAC3D,CAAC;IAED,OAAO,MAAMf,iBAAiB,CAACQ,MAAa,CAAC;EAC/C,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAIC,MAAmB,IAAmB;EACpE,IAAI,CAACjB,YAAY,EAAE;IACjB,MAAM,IAAIkB,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EACA,OAAO,IAAIlB,YAAY,CAACiB,MAAM,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAGA,CAACF,MAAmB,EAAEG,UAAkB,KAAmB;EACxF,OAAO,IAAIlB,YAAY,CAACe,MAAM,EAAEG,UAAU,CAAC;AAC7C,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAACJ,MAAmB,EAAEK,UAAkB,KAAmB;EACxF,OAAO,IAAIrB,YAAY,CAACgB,MAAM,EAAEK,UAAU,CAAC;AAC7C,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CACvBC,YAA0B,EAC1BC,IAAY,KACa;EACzBrB,OAAO,CAACC,GAAG,CAAC,8BAA8BoB,IAAI,EAAE,CAAC;EAEjD,MAAMC,aAAa,GAAG,IAAIC,OAAO,CAAc,CAACC,OAAO,EAAEC,MAAM,KAAK;IAClE,MAAMC,WAAW,GAAIC,KAAoB,IAAK;MAC5C,MAAMC,MAAM,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC;MAE/B,IAAI,CAACD,MAAM,EAAE;QACXR,YAAY,CAACU,GAAG,CAAC,OAAO,EAAEJ,WAAsC,CAAC;QACjED,MAAM,CAAC,IAAIX,KAAK,CAAC,sCAAsC,CAAC,CAAC;MAC3D,CAAC,MAAM,IAAIc,MAAM,CAACG,EAAE,KAAKV,IAAI,EAAE;QAC7BD,YAAY,CAACU,GAAG,CAAC,OAAO,EAAEJ,WAAsC,CAAC;QACjEF,OAAO,CAACI,MAAM,CAAC;MACjB;IACF,CAAC;IAEDR,YAAY,CAACY,EAAE,CAAC,OAAO,EAAEN,WAAsC,CAAC;EAClE,CAAC,CAAC;EAEF,IAAI;IACF,MAAMN,YAAY,CAACa,GAAG,CAACZ,IAAI,CAAC;IAC5B,OAAOC,aAAa;EACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,2BAA2BU,IAAI,GAAG,EAAEV,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}