import { Struct, type JsonValue } from '@bufbuild/protobuf';
import type { CallOptions } from '@connectrpc/connect';
import type { RobotClient } from '../../robot';
import type { Options } from '../../types';
import type { DataManager } from './data-manager';
export declare class DataManagerClient implements DataManager {
    private client;
    readonly name: string;
    private readonly options;
    callOptions: CallOptions;
    constructor(client: RobotClient, name: string, options?: Options);
    /**
     * Sync data stored on the machine to the cloud.
     *
     * @example
     *
     * ```ts
     * const dataManager = new VIAM.DataManagerClient(
     *   machine,
     *   'my_data_manager'
     * );
     * await dataManager.sync();
     * ```
     *
     * For more information, see [Data Manager
     * API](https://docs.viam.com/dev/reference/apis/services/data/#sync).
     *
     * @param extra - Extra arguments to pass to the sync request.
     * @param callOptions - Call options for the sync request.
     */
    sync(extra?: {}, callOptions?: CallOptions): Promise<void>;
    /**
     * Do a command on the data manager.
     *
     * @example
     *
     * ```ts
     * const dataManager = new VIAM.DataManagerClient(
     *   machine,
     *   'my_data_manager'
     * );
     * await dataManager.doCommand(new Struct({ cmd: 'test', data1: 500 }));
     * ```
     *
     * For more information, see [Data Manager
     * API](https://docs.viam.com/dev/reference/apis/services/data/#docommand).
     *
     * @param command - The command to do.
     * @param callOptions - Call options for the command.
     */
    doCommand(command: Struct, callOptions?: CallOptions): Promise<JsonValue>;
}
