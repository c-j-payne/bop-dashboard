// @generated by protoc-gen-es v1.10.0
// @generated from file app/datapipelines/v1/data_pipelines.proto (package viam.app.datapipelines.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum viam.app.datapipelines.v1.DataPipelineRunStatus
 */
export declare enum DataPipelineRunStatus {
  /**
   * @generated from enum value: DATA_PIPELINE_RUN_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DATA_PIPELINE_RUN_STATUS_SCHEDULED = 1;
   */
  SCHEDULED = 1,

  /**
   * @generated from enum value: DATA_PIPELINE_RUN_STATUS_STARTED = 2;
   */
  STARTED = 2,

  /**
   * @generated from enum value: DATA_PIPELINE_RUN_STATUS_COMPLETED = 3;
   */
  COMPLETED = 3,

  /**
   * @generated from enum value: DATA_PIPELINE_RUN_STATUS_FAILED = 4;
   */
  FAILED = 4,
}

/**
 * @generated from message viam.app.datapipelines.v1.DataPipeline
 */
export declare class DataPipeline extends Message<DataPipeline> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The associated Viam organization ID.
   *
   * @generated from field: string organization_id = 2;
   */
  organizationId: string;

  /**
   * A unique identifier at the org level.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * A MongoDB aggregation pipeline as a list of BSON documents, where
   * each document is one stage in the pipeline.
   *
   * @generated from field: repeated bytes mql_binary = 4;
   */
  mqlBinary: Uint8Array[];

  /**
   * A cron expression representing the expected execution schedule in UTC (note this also
   * defines the input time window; an hourly schedule would process 1 hour of data at a time).
   *
   * @generated from field: string schedule = 5;
   */
  schedule: string;

  /**
   * Whether or not the pipeline is enabled.
   *
   * @generated from field: bool enabled = 6;
   */
  enabled: boolean;

  /**
   * The time the pipeline was created.
   *
   * @generated from field: google.protobuf.Timestamp created_on = 7;
   */
  createdOn?: Timestamp;

  /**
   * The time the pipeline was last updated.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 8;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<DataPipeline>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.DataPipeline";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataPipeline;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataPipeline;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataPipeline;

  static equals(a: DataPipeline | PlainMessage<DataPipeline> | undefined, b: DataPipeline | PlainMessage<DataPipeline> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.GetDataPipelineRequest
 */
export declare class GetDataPipelineRequest extends Message<GetDataPipelineRequest> {
  /**
   * The ID of the data pipeline to retrieve.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<GetDataPipelineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.GetDataPipelineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataPipelineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataPipelineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataPipelineRequest;

  static equals(a: GetDataPipelineRequest | PlainMessage<GetDataPipelineRequest> | undefined, b: GetDataPipelineRequest | PlainMessage<GetDataPipelineRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.GetDataPipelineResponse
 */
export declare class GetDataPipelineResponse extends Message<GetDataPipelineResponse> {
  /**
   * @generated from field: viam.app.datapipelines.v1.DataPipeline data_pipeline = 1;
   */
  dataPipeline?: DataPipeline;

  constructor(data?: PartialMessage<GetDataPipelineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.GetDataPipelineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataPipelineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataPipelineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataPipelineResponse;

  static equals(a: GetDataPipelineResponse | PlainMessage<GetDataPipelineResponse> | undefined, b: GetDataPipelineResponse | PlainMessage<GetDataPipelineResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.ListDataPipelinesRequest
 */
export declare class ListDataPipelinesRequest extends Message<ListDataPipelinesRequest> {
  /**
   * The associated Viam organization ID.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  constructor(data?: PartialMessage<ListDataPipelinesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.ListDataPipelinesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDataPipelinesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDataPipelinesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDataPipelinesRequest;

  static equals(a: ListDataPipelinesRequest | PlainMessage<ListDataPipelinesRequest> | undefined, b: ListDataPipelinesRequest | PlainMessage<ListDataPipelinesRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.ListDataPipelinesResponse
 */
export declare class ListDataPipelinesResponse extends Message<ListDataPipelinesResponse> {
  /**
   * @generated from field: repeated viam.app.datapipelines.v1.DataPipeline data_pipelines = 1;
   */
  dataPipelines: DataPipeline[];

  constructor(data?: PartialMessage<ListDataPipelinesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.ListDataPipelinesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDataPipelinesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDataPipelinesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDataPipelinesResponse;

  static equals(a: ListDataPipelinesResponse | PlainMessage<ListDataPipelinesResponse> | undefined, b: ListDataPipelinesResponse | PlainMessage<ListDataPipelinesResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.CreateDataPipelineRequest
 */
export declare class CreateDataPipelineRequest extends Message<CreateDataPipelineRequest> {
  /**
   * The associated Viam organization ID.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  /**
   * A unique identifier at the org level.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * A MongoDB aggregation pipeline as a list of BSON documents, where
   * each document is one stage in the pipeline.
   *
   * @generated from field: repeated bytes mql_binary = 3;
   */
  mqlBinary: Uint8Array[];

  /**
   * A cron expression representing the expected execution schedule in UTC (note this also
   * defines the input time window; an hourly schedule would process 1 hour of data at a time).
   *
   * @generated from field: string schedule = 4;
   */
  schedule: string;

  constructor(data?: PartialMessage<CreateDataPipelineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.CreateDataPipelineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDataPipelineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDataPipelineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDataPipelineRequest;

  static equals(a: CreateDataPipelineRequest | PlainMessage<CreateDataPipelineRequest> | undefined, b: CreateDataPipelineRequest | PlainMessage<CreateDataPipelineRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.CreateDataPipelineResponse
 */
export declare class CreateDataPipelineResponse extends Message<CreateDataPipelineResponse> {
  /**
   * The ID of the newly created data pipeline.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<CreateDataPipelineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.CreateDataPipelineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDataPipelineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDataPipelineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDataPipelineResponse;

  static equals(a: CreateDataPipelineResponse | PlainMessage<CreateDataPipelineResponse> | undefined, b: CreateDataPipelineResponse | PlainMessage<CreateDataPipelineResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.UpdateDataPipelineRequest
 */
export declare class UpdateDataPipelineRequest extends Message<UpdateDataPipelineRequest> {
  /**
   * The ID of the data pipeline to update.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * A unique identifier at the org level.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * A MongoDB aggregation pipeline as a list of BSON documents, where
   * each document is one stage in the pipeline.
   *
   * @generated from field: repeated bytes mql_binary = 3;
   */
  mqlBinary: Uint8Array[];

  /**
   * A cron expression representing the expected execution schedule in UTC (note this also
   * defines the input time window; an hourly schedule would process 1 hour of data at a time).
   *
   * @generated from field: string schedule = 4;
   */
  schedule: string;

  constructor(data?: PartialMessage<UpdateDataPipelineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.UpdateDataPipelineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDataPipelineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDataPipelineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDataPipelineRequest;

  static equals(a: UpdateDataPipelineRequest | PlainMessage<UpdateDataPipelineRequest> | undefined, b: UpdateDataPipelineRequest | PlainMessage<UpdateDataPipelineRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.UpdateDataPipelineResponse
 */
export declare class UpdateDataPipelineResponse extends Message<UpdateDataPipelineResponse> {
  constructor(data?: PartialMessage<UpdateDataPipelineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.UpdateDataPipelineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDataPipelineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDataPipelineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDataPipelineResponse;

  static equals(a: UpdateDataPipelineResponse | PlainMessage<UpdateDataPipelineResponse> | undefined, b: UpdateDataPipelineResponse | PlainMessage<UpdateDataPipelineResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.DeleteDataPipelineRequest
 */
export declare class DeleteDataPipelineRequest extends Message<DeleteDataPipelineRequest> {
  /**
   * The ID of the data pipeline to delete.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<DeleteDataPipelineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.DeleteDataPipelineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDataPipelineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDataPipelineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDataPipelineRequest;

  static equals(a: DeleteDataPipelineRequest | PlainMessage<DeleteDataPipelineRequest> | undefined, b: DeleteDataPipelineRequest | PlainMessage<DeleteDataPipelineRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.DeleteDataPipelineResponse
 */
export declare class DeleteDataPipelineResponse extends Message<DeleteDataPipelineResponse> {
  constructor(data?: PartialMessage<DeleteDataPipelineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.DeleteDataPipelineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDataPipelineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDataPipelineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDataPipelineResponse;

  static equals(a: DeleteDataPipelineResponse | PlainMessage<DeleteDataPipelineResponse> | undefined, b: DeleteDataPipelineResponse | PlainMessage<DeleteDataPipelineResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.EnableDataPipelineRequest
 */
export declare class EnableDataPipelineRequest extends Message<EnableDataPipelineRequest> {
  /**
   * The ID of the data pipeline to enable.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<EnableDataPipelineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.EnableDataPipelineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableDataPipelineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableDataPipelineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableDataPipelineRequest;

  static equals(a: EnableDataPipelineRequest | PlainMessage<EnableDataPipelineRequest> | undefined, b: EnableDataPipelineRequest | PlainMessage<EnableDataPipelineRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.EnableDataPipelineResponse
 */
export declare class EnableDataPipelineResponse extends Message<EnableDataPipelineResponse> {
  constructor(data?: PartialMessage<EnableDataPipelineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.EnableDataPipelineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableDataPipelineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableDataPipelineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableDataPipelineResponse;

  static equals(a: EnableDataPipelineResponse | PlainMessage<EnableDataPipelineResponse> | undefined, b: EnableDataPipelineResponse | PlainMessage<EnableDataPipelineResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.DisableDataPipelineRequest
 */
export declare class DisableDataPipelineRequest extends Message<DisableDataPipelineRequest> {
  /**
   * The ID of the data pipeline to disable.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<DisableDataPipelineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.DisableDataPipelineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableDataPipelineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableDataPipelineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableDataPipelineRequest;

  static equals(a: DisableDataPipelineRequest | PlainMessage<DisableDataPipelineRequest> | undefined, b: DisableDataPipelineRequest | PlainMessage<DisableDataPipelineRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.DisableDataPipelineResponse
 */
export declare class DisableDataPipelineResponse extends Message<DisableDataPipelineResponse> {
  constructor(data?: PartialMessage<DisableDataPipelineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.DisableDataPipelineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableDataPipelineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableDataPipelineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableDataPipelineResponse;

  static equals(a: DisableDataPipelineResponse | PlainMessage<DisableDataPipelineResponse> | undefined, b: DisableDataPipelineResponse | PlainMessage<DisableDataPipelineResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.ListDataPipelineRunsRequest
 */
export declare class ListDataPipelineRunsRequest extends Message<ListDataPipelineRunsRequest> {
  /**
   * The ID of the data pipeline to list runs for.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * pagination fields
   *
   * @generated from field: uint32 page_size = 2;
   */
  pageSize: number;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  constructor(data?: PartialMessage<ListDataPipelineRunsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.ListDataPipelineRunsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDataPipelineRunsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDataPipelineRunsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDataPipelineRunsRequest;

  static equals(a: ListDataPipelineRunsRequest | PlainMessage<ListDataPipelineRunsRequest> | undefined, b: ListDataPipelineRunsRequest | PlainMessage<ListDataPipelineRunsRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.ListDataPipelineRunsResponse
 */
export declare class ListDataPipelineRunsResponse extends Message<ListDataPipelineRunsResponse> {
  /**
   * The ID of the data pipeline the runs are for.
   *
   * @generated from field: string pipeline_id = 1;
   */
  pipelineId: string;

  /**
   * The runs that were run.
   *
   * @generated from field: repeated viam.app.datapipelines.v1.DataPipelineRun runs = 2;
   */
  runs: DataPipelineRun[];

  /**
   * A token to retrieve the next page of results.
   *
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListDataPipelineRunsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.ListDataPipelineRunsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDataPipelineRunsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDataPipelineRunsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDataPipelineRunsResponse;

  static equals(a: ListDataPipelineRunsResponse | PlainMessage<ListDataPipelineRunsResponse> | undefined, b: ListDataPipelineRunsResponse | PlainMessage<ListDataPipelineRunsResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.datapipelines.v1.DataPipelineRun
 */
export declare class DataPipelineRun extends Message<DataPipelineRun> {
  /**
   * The ID of the run.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The time the run started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * The time the run ended.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * The start time of the data that was processed in the run.
   *
   * @generated from field: google.protobuf.Timestamp data_start_time = 4;
   */
  dataStartTime?: Timestamp;

  /**
   * The end time of the data that was processed in the run.
   *
   * @generated from field: google.protobuf.Timestamp data_end_time = 5;
   */
  dataEndTime?: Timestamp;

  /**
   * The status of the run.
   *
   * @generated from field: viam.app.datapipelines.v1.DataPipelineRunStatus status = 6;
   */
  status: DataPipelineRunStatus;

  constructor(data?: PartialMessage<DataPipelineRun>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.datapipelines.v1.DataPipelineRun";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataPipelineRun;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataPipelineRun;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataPipelineRun;

  static equals(a: DataPipelineRun | PlainMessage<DataPipelineRun> | undefined, b: DataPipelineRun | PlainMessage<DataPipelineRun> | undefined): boolean;
}

